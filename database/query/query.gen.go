// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	DictionaryGroup     *dictionaryGroup
	DictionaryGroupItem *dictionaryGroupItem
	Migration           *migration
	PermissionRule      *permissionRule
	Tenant              *tenant
	TenantUser          *tenantUser
	UserMapping         *userMapping
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	DictionaryGroup = &Q.DictionaryGroup
	DictionaryGroupItem = &Q.DictionaryGroupItem
	Migration = &Q.Migration
	PermissionRule = &Q.PermissionRule
	Tenant = &Q.Tenant
	TenantUser = &Q.TenantUser
	UserMapping = &Q.UserMapping
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		DictionaryGroup:     newDictionaryGroup(db, opts...),
		DictionaryGroupItem: newDictionaryGroupItem(db, opts...),
		Migration:           newMigration(db, opts...),
		PermissionRule:      newPermissionRule(db, opts...),
		Tenant:              newTenant(db, opts...),
		TenantUser:          newTenantUser(db, opts...),
		UserMapping:         newUserMapping(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DictionaryGroup     dictionaryGroup
	DictionaryGroupItem dictionaryGroupItem
	Migration           migration
	PermissionRule      permissionRule
	Tenant              tenant
	TenantUser          tenantUser
	UserMapping         userMapping
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		DictionaryGroup:     q.DictionaryGroup.clone(db),
		DictionaryGroupItem: q.DictionaryGroupItem.clone(db),
		Migration:           q.Migration.clone(db),
		PermissionRule:      q.PermissionRule.clone(db),
		Tenant:              q.Tenant.clone(db),
		TenantUser:          q.TenantUser.clone(db),
		UserMapping:         q.UserMapping.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		DictionaryGroup:     q.DictionaryGroup.replaceDB(db),
		DictionaryGroupItem: q.DictionaryGroupItem.replaceDB(db),
		Migration:           q.Migration.replaceDB(db),
		PermissionRule:      q.PermissionRule.replaceDB(db),
		Tenant:              q.Tenant.replaceDB(db),
		TenantUser:          q.TenantUser.replaceDB(db),
		UserMapping:         q.UserMapping.replaceDB(db),
	}
}

type queryCtx struct {
	DictionaryGroup     IDictionaryGroupDo
	DictionaryGroupItem IDictionaryGroupItemDo
	Migration           IMigrationDo
	PermissionRule      IPermissionRuleDo
	Tenant              ITenantDo
	TenantUser          ITenantUserDo
	UserMapping         IUserMappingDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DictionaryGroup:     q.DictionaryGroup.WithContext(ctx),
		DictionaryGroupItem: q.DictionaryGroupItem.WithContext(ctx),
		Migration:           q.Migration.WithContext(ctx),
		PermissionRule:      q.PermissionRule.WithContext(ctx),
		Tenant:              q.Tenant.WithContext(ctx),
		TenantUser:          q.TenantUser.WithContext(ctx),
		UserMapping:         q.UserMapping.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
