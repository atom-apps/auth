// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/atom-apps/auth/database/models"
)

func newUserMapping(db *gorm.DB, opts ...gen.DOOption) userMapping {
	_userMapping := userMapping{}

	_userMapping.userMappingDo.UseDB(db, opts...)
	_userMapping.userMappingDo.UseModel(&models.UserMapping{})

	tableName := _userMapping.userMappingDo.TableName()
	_userMapping.ALL = field.NewAsterisk(tableName)
	_userMapping.ID = field.NewInt64(tableName, "id")
	_userMapping.CreatedAt = field.NewTime(tableName, "created_at")
	_userMapping.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userMapping.DeletedAt = field.NewField(tableName, "deleted_at")
	_userMapping.UUID = field.NewString(tableName, "uuid")
	_userMapping.Name = field.NewString(tableName, "name")

	_userMapping.fillFieldMap()

	return _userMapping
}

type userMapping struct {
	userMappingDo userMappingDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UUID      field.String
	Name      field.String

	fieldMap map[string]field.Expr
}

func (u userMapping) Table(newTableName string) *userMapping {
	u.userMappingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userMapping) As(alias string) *userMapping {
	u.userMappingDo.DO = *(u.userMappingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userMapping) updateTableName(table string) *userMapping {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UUID = field.NewString(table, "uuid")
	u.Name = field.NewString(table, "name")

	u.fillFieldMap()

	return u
}

func (u *userMapping) WithContext(ctx context.Context) IUserMappingDo {
	return u.userMappingDo.WithContext(ctx)
}

func (u userMapping) TableName() string { return u.userMappingDo.TableName() }

func (u userMapping) Alias() string { return u.userMappingDo.Alias() }

func (u userMapping) Columns(cols ...field.Expr) gen.Columns { return u.userMappingDo.Columns(cols...) }

func (u *userMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userMapping) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["uuid"] = u.UUID
	u.fieldMap["name"] = u.Name
}

func (u userMapping) clone(db *gorm.DB) userMapping {
	u.userMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userMapping) replaceDB(db *gorm.DB) userMapping {
	u.userMappingDo.ReplaceDB(db)
	return u
}

type userMappingDo struct{ gen.DO }

type IUserMappingDo interface {
	gen.SubQuery
	Debug() IUserMappingDo
	WithContext(ctx context.Context) IUserMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserMappingDo
	WriteDB() IUserMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserMappingDo
	Not(conds ...gen.Condition) IUserMappingDo
	Or(conds ...gen.Condition) IUserMappingDo
	Select(conds ...field.Expr) IUserMappingDo
	Where(conds ...gen.Condition) IUserMappingDo
	Order(conds ...field.Expr) IUserMappingDo
	Distinct(cols ...field.Expr) IUserMappingDo
	Omit(cols ...field.Expr) IUserMappingDo
	Join(table schema.Tabler, on ...field.Expr) IUserMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserMappingDo
	Group(cols ...field.Expr) IUserMappingDo
	Having(conds ...gen.Condition) IUserMappingDo
	Limit(limit int) IUserMappingDo
	Offset(offset int) IUserMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserMappingDo
	Unscoped() IUserMappingDo
	Create(values ...*models.UserMapping) error
	CreateInBatches(values []*models.UserMapping, batchSize int) error
	Save(values ...*models.UserMapping) error
	First() (*models.UserMapping, error)
	Take() (*models.UserMapping, error)
	Last() (*models.UserMapping, error)
	Find() ([]*models.UserMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserMapping, err error)
	FindInBatches(result *[]*models.UserMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserMappingDo
	Assign(attrs ...field.AssignExpr) IUserMappingDo
	Joins(fields ...field.RelationField) IUserMappingDo
	Preload(fields ...field.RelationField) IUserMappingDo
	FirstOrInit() (*models.UserMapping, error)
	FirstOrCreate() (*models.UserMapping, error)
	FindByPage(offset int, limit int) (result []*models.UserMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userMappingDo) Debug() IUserMappingDo {
	return u.withDO(u.DO.Debug())
}

func (u userMappingDo) WithContext(ctx context.Context) IUserMappingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userMappingDo) ReadDB() IUserMappingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userMappingDo) WriteDB() IUserMappingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userMappingDo) Session(config *gorm.Session) IUserMappingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userMappingDo) Clauses(conds ...clause.Expression) IUserMappingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userMappingDo) Returning(value interface{}, columns ...string) IUserMappingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userMappingDo) Not(conds ...gen.Condition) IUserMappingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userMappingDo) Or(conds ...gen.Condition) IUserMappingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userMappingDo) Select(conds ...field.Expr) IUserMappingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userMappingDo) Where(conds ...gen.Condition) IUserMappingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userMappingDo) Order(conds ...field.Expr) IUserMappingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userMappingDo) Distinct(cols ...field.Expr) IUserMappingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userMappingDo) Omit(cols ...field.Expr) IUserMappingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userMappingDo) Join(table schema.Tabler, on ...field.Expr) IUserMappingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserMappingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserMappingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userMappingDo) Group(cols ...field.Expr) IUserMappingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userMappingDo) Having(conds ...gen.Condition) IUserMappingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userMappingDo) Limit(limit int) IUserMappingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userMappingDo) Offset(offset int) IUserMappingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserMappingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userMappingDo) Unscoped() IUserMappingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userMappingDo) Create(values ...*models.UserMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userMappingDo) CreateInBatches(values []*models.UserMapping, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userMappingDo) Save(values ...*models.UserMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userMappingDo) First() (*models.UserMapping, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserMapping), nil
	}
}

func (u userMappingDo) Take() (*models.UserMapping, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserMapping), nil
	}
}

func (u userMappingDo) Last() (*models.UserMapping, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserMapping), nil
	}
}

func (u userMappingDo) Find() ([]*models.UserMapping, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserMapping), err
}

func (u userMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserMapping, err error) {
	buf := make([]*models.UserMapping, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userMappingDo) FindInBatches(result *[]*models.UserMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userMappingDo) Attrs(attrs ...field.AssignExpr) IUserMappingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userMappingDo) Assign(attrs ...field.AssignExpr) IUserMappingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userMappingDo) Joins(fields ...field.RelationField) IUserMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userMappingDo) Preload(fields ...field.RelationField) IUserMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userMappingDo) FirstOrInit() (*models.UserMapping, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserMapping), nil
	}
}

func (u userMappingDo) FirstOrCreate() (*models.UserMapping, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserMapping), nil
	}
}

func (u userMappingDo) FindByPage(offset int, limit int) (result []*models.UserMapping, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userMappingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userMappingDo) Delete(models ...*models.UserMapping) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userMappingDo) withDO(do gen.Dao) *userMappingDo {
	u.DO = *do.(*gen.DO)
	return u
}
